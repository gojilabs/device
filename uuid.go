package device

import (
	"bytes"
	"crypto/sha256"
	"net"
	"os"
	"sort"
	"sync"

	"github.com/satori/go.uuid"
)

const rootUUIDEnvVar = "NAMESPACE_UUID"

var uuidString string
var secretString string
var secretBytes []byte
var secretStringMutex sync.Mutex
var secretBytesgMutex sync.Mutex
var uuidStringMutex sync.Mutex

func getMACAddresses() (addresses []string) {
	interfaces, err := net.Interfaces()
	if err == nil {
		for _, i := range interfaces {
			if bytes.Compare(i.HardwareAddr, nil) != 0 {
				addresses = append(addresses, i.HardwareAddr.String())
			}
		}
	}
	sort.Strings(addresses)
	return addresses
}

func getSecretBytes() []byte {
	secretBytesgMutex.Lock()
	defer secretBytesgMutex.Unlock()

	if bytes.Equal(secretBytes, nil) {
		addressesStr := ""
		for _, address := range getMACAddresses() {
			addressesStr = addressesStr + address + "\n"
		}
		addressesBytes := []byte(addressesStr)
		secretHash := sha256.Sum256(addressesBytes)
		secretBytes = secretHash[:]
	}

	return secretBytes
}

// GetSecret Get secret key for this device, generated by sorting the MAC addresses of all the network interfaces
func GetSecret() string {
	secretStringMutex.Lock()
	defer secretStringMutex.Unlock()

	if secretString == "" {
		secretString = string(getSecretBytes())
	}

	return secretString
}

// GetUUID Get V5 UUID based on the master namespace UUID and the device secret
func GetUUID() string {
	uuidStringMutex.Lock()
	defer uuidStringMutex.Unlock()

	if uuidString == "" {
		rootUUIDString := os.Getenv(rootUUIDEnvVar)

		if rootUUIDString != "" {
			rootUUID, err := uuid.FromString(rootUUIDString)

			if err == nil {
				rawUUID := uuid.NewV5(rootUUID, GetSecret())
				uuidString = rawUUID.String()
			}
		}
	}

	return uuidString
}
